// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NordwindApi.DAL;

namespace NordwindApi.Migrations
{
    [DbContext(typeof(NordwindContext))]
    [Migration("20190921104231_Create")]
    partial class Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NordwindApi.Core.Entiies.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("City", "CompanyName", "PostalCode", "Region");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.CustomerCustomerDemo", b =>
                {
                    b.Property<int>("CustomerTypeID");

                    b.Property<int>("CustomerID");

                    b.HasKey("CustomerTypeID", "CustomerID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerCustomerDemo");
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.CustomerDemographic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("CustomerDemographics");
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.EmployeeTerritories", b =>
                {
                    b.Property<int>("EmployeeID");

                    b.Property<int>("TeritoryID");

                    b.HasKey("EmployeeID", "TeritoryID");

                    b.HasIndex("TeritoryID");

                    b.ToTable("EmployeeTerritories");
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Extensions")
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("HireDate");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(4)");

                    b.Property<byte[]>("Photo")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 1)))
                        .HasColumnType("image");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ReportTo");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TitleOfCourtesy")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PostalCode", "LastName");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerID");

                    b.Property<int>("EmployeeID");

                    b.Property<decimal?>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("OrderDate");

                    b.Property<DateTime>("RequiredDate");

                    b.Property<string>("ShipAddress")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ShipCity")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ShipCountry")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ShipName")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ShipPostalCode")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ShipRegion")
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("ShippedDate");

                    b.Property<int?>("ShipperID")
                        .HasColumnName("ShipVia");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ShipperID");

                    b.HasIndex("ShippedDate", "OrderDate", "ShipPostalCode");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.OrderDetail", b =>
                {
                    b.Property<int>("OrderID");

                    b.Property<int>("ProductID");

                    b.Property<float>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0f);

                    b.Property<short>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue((short)1);

                    b.Property<decimal>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryID");

                    b.Property<bool>("Discounted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ReorderLevel")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("SupplierID");

                    b.Property<int?>("UnitONOrder")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<decimal?>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<int?>("UnitslnStock")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ProductName");

                    b.HasIndex("SupplierID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegionDescription")
                        .IsRequired()
                        .HasColumnType("nchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.Shipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Companyname")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName", "PostalCode");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.Territory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RegionID");

                    b.Property<string>("TeritryDescription")
                        .IsRequired()
                        .HasColumnType("nchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RegionID");

                    b.ToTable("Territories");
                });

            modelBuilder.Entity("NordwindApi.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("Picture")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 4)))
                        .HasColumnType("image");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.CustomerCustomerDemo", b =>
                {
                    b.HasOne("NordwindApi.Core.Entiies.Customer", "Customer")
                        .WithMany("CustomerCustomerDemos")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NordwindApi.Core.Entiies.CustomerDemographic", "CustomerDemographic")
                        .WithMany("CustomerCustomerDemos")
                        .HasForeignKey("CustomerTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.EmployeeTerritories", b =>
                {
                    b.HasOne("NordwindApi.Core.Entiies.Employer", "Employe")
                        .WithMany("EmployeeTerritories")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NordwindApi.Core.Entiies.Territory", "Territory")
                        .WithMany("EmployeeTerritories")
                        .HasForeignKey("TeritoryID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.Employer", b =>
                {
                    b.HasOne("NordwindApi.Core.Entiies.Employer", "ReportToEmployee")
                        .WithMany("Employe")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.Order", b =>
                {
                    b.HasOne("NordwindApi.Core.Entiies.Customer", "Customers")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NordwindApi.Core.Entiies.Employer", "Employees")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NordwindApi.Core.Entiies.Shipper", "Shippers")
                        .WithMany("Orders")
                        .HasForeignKey("ShipperID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.OrderDetail", b =>
                {
                    b.HasOne("NordwindApi.Core.Entiies.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NordwindApi.Core.Entiies.Product", "Products")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.Product", b =>
                {
                    b.HasOne("NordwindApi.Core.Entities.Category", "Categorie")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NordwindApi.Core.Entiies.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NordwindApi.Core.Entiies.Territory", b =>
                {
                    b.HasOne("NordwindApi.Core.Entiies.Region", "Region")
                        .WithMany("Territorie")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
